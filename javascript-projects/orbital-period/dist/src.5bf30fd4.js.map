{"version":3,"sources":["utils/orbitalPeriod.js","index.js"],"names":["orbitalPeriod","arr","map","obj","a","avgAlt","T","Math","PI","sqrt","pow","name","round","orbitalPeriodHours","orbitalPeriods","forEach","orbitalPeriodDays","window","console","log"],"mappings":";AAoEC,aAxDM,SAASA,EAAcC,GAIrBA,OAAAA,EAAIC,IAAI,SAAAC,GACPC,IAAAA,EAHa,UAGMD,EAAIE,OACvBC,EAAI,EAAIC,KAAKC,GAAKD,KAAKE,KAAKF,KAAKG,IAAIN,EAAG,GALrC,aAMF,MAAA,CAAEO,KAAMR,EAAIQ,KAAMX,cAAeO,KAAKK,MAAMN,MAehD,SAASO,EAAmBZ,GAC3Ba,IAAAA,EAAiBd,EAAcC,GAU9Ba,OAJPA,EAAeC,QAAQ,SAAAZ,GACrBA,EAAIU,mBAAqBN,KAAKK,MAAMT,EAAIH,cAAgB,GAAK,WACtDG,EAAIH,gBAENc,EAcF,SAASE,EAAkBf,GAC1Ba,IAAAA,EAAiBd,EAAcC,GAO9Ba,OAJPA,EAAeC,QAAQ,SAAAZ,GACrBA,EAAIa,kBAAoBT,KAAKK,MAAMT,EAAIH,cAAgB,GAAK,GAAK,WAC1DG,EAAIH,gBAENc,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,kBAAA;;AC7CD,aAEA,IAAA,EAAA,QAAA,yBAMAG,OAAOjB,cAAgBA,EAAvB,cACAiB,OAAOJ,mBAAqBA,EAA5B,mBACAI,OAAOD,kBAAoBA,EAA3B,kBAIAE,QAAQC,IAAI,+DACZD,QAAQC,IAAI,eACZD,QAAQC,KAAI,EAAc,EAAA,eAAA,CAAC,CAAER,KAAO,UAAWN,OAAS,eAExDa,QAAQC,IAAI,yIAKZD,QAAQC,IAAI,eACZD,QAAQC,KAAI,EAAc,EAAA,eAAA,CACxB,CAAER,KAAM,MAAON,OAAQ,OACvB,CAAEM,KAAM,SAAUN,OAAQ,OAC1B,CAAEM,KAAM,OAAQN,OAAQ,eAG1Ba,QAAQC,IAAI,oEACZD,QAAQC,IAAI,eACZD,QAAQC,KAAI,EAAmB,EAAA,oBAAA,CAAC,CAAER,KAAO,UAAWN,OAAS,eAE7Da,QAAQC,IAAI,8DACZD,QAAQC,IAAI,eACZD,QAAQC,KAAI,EAAkB,EAAA,mBAAA,CAAC,CAAER,KAAM,OAAQN,OAAQ","file":"src.5bf30fd4.js","sourceRoot":"../src","sourcesContent":["\n/*\n * Calculate the orbital period of ojects around the Earth in seconds.\n * @param {Array<object>} arr An array of objects in the format:\n *   {name: 'name', avgAlt: avgAlt}\n * avgAlt is the object's average altitude in kilometers\n * @return {Array<object>} An array of objects in the format:\n *   {name: 'name', orbitalPeriod: T}\n * T is the orbital period in seconds, rounded to the nearest\n * whole number\n */\n\nexport function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const EARTH_RADIUS = 6367.4447; // kilometers\n\n  return arr.map(obj => {\n    const a = EARTH_RADIUS + obj.avgAlt;\n    const T = 2 * Math.PI * Math.sqrt(Math.pow(a, 3) / GM);\n    return { name: obj.name, orbitalPeriod: Math.round(T) };\n  });\n}\n\n/*\n * Calculate the orbital period of ojects around the Earth in hours.\n * @param {Array<object>} arr An array of objects in the format:\n *   {name: 'name', avgAlt: avgAlt}\n * avgAlt is the object's average altitude in kilometers\n * @return {Array<object>} An array of objects in the format:\n *   {name: 'name', orbitalPeriodHours: T}\n * T is the orbital period in hours, rounded to the nearest\n * whole number\n */\n\nexport function orbitalPeriodHours(arr) {\n  const orbitalPeriods = orbitalPeriod(arr);\n  // mutate orbitalPeriods\n  // this is fine since it's a local function variable\n  // i.e. we aren't mutating the function argument \"arr\"\n  // (could have instead implemented it in a non-mutating\n  // way as with map() above)\n  orbitalPeriods.forEach(obj => {\n    obj.orbitalPeriodHours = Math.round(obj.orbitalPeriod / 60 / 60);\n    delete obj.orbitalPeriod;\n  });\n  return orbitalPeriods;\n}\n\n/*\n * Calculate the orbital period of ojects around the Earth in days.\n * @param {Array<object>} arr An array of objects in the format:\n *   {name: 'name', avgAlt: avgAlt}\n * avgAlt is the object's average altitude in kilometers\n * @return {Array<object>} An array of objects in the format:\n *   {name: 'name', orbitalPeriodDays: T}\n * T is the orbital period in days, rounded to the nearest\n * whole number\n */\n\nexport function orbitalPeriodDays(arr) {\n  const orbitalPeriods = orbitalPeriod(arr);\n  // mutate orbitalPeriods\n  // this is fine since it's a local function variable\n  orbitalPeriods.forEach(obj => {\n    obj.orbitalPeriodDays = Math.round(obj.orbitalPeriod / 60 / 60 / 24);\n    delete obj.orbitalPeriod;\n  });\n  return orbitalPeriods;\n}\n","/*\n * JavaScript Orbital Period Calculation\n * Alex Kozlov, 2019\n *\n * The orbital period is the time a give astronomical object\n * takes to complete one orbit around another object.\n *\n * For a small body orbiting a central body in a circular or\n * elliptic orbit, the orbital period T (in seconds) is:\n *\n * T = 2 * PI * sqrt(a^3 / GM)\n *\n * where:\n *   a = the orbit's semi-major axis\n *   GM = product of:\n *     G = gravitational constant\n *     M = mass of the larger body\n *\n * In this application the body being orbited is the Earth.\n *\n * Ref: https://en.wikipedia.org/wiki/Orbital_period\n */\n\n\"use strict\";\n\nimport {\n  orbitalPeriod,\n  orbitalPeriodHours,\n  orbitalPeriodDays\n} from './utils/orbitalPeriod';\n\nwindow.orbitalPeriod = orbitalPeriod;\nwindow.orbitalPeriodHours = orbitalPeriodHours;\nwindow.orbitalPeriodDays = orbitalPeriodDays;\n\n/***  Usage Examples  ***/\n\nconsole.log('orbitalPeriod([{ name : \"sputnik\", avgAlt : 35873.5553 }]);');\nconsole.log('// Returns:');\nconsole.log(orbitalPeriod([{ name : \"sputnik\", avgAlt : 35873.5553 }]));\n\nconsole.log('orbitalPeriod([\\n' +\n  '  { name: \"iss\", avgAlt: 413.6 },\\n' +\n  '  { name: \"hubble\", avgAlt: 556.7 },\\n' +\n  '  { name: \"moon\", avgAlt: 378632.553 }\\n' +\n  ']);');\nconsole.log('// Returns:');\nconsole.log(orbitalPeriod([\n  { name: \"iss\", avgAlt: 413.6 },\n  { name: \"hubble\", avgAlt: 556.7 },\n  { name: \"moon\", avgAlt: 378632.553 }\n]));\n\nconsole.log('orbitalPeriodHours([{ name : \"sputnik\", avgAlt : 35873.5553 }]);');\nconsole.log('// Returns:');\nconsole.log(orbitalPeriodHours([{ name : \"sputnik\", avgAlt : 35873.5553 }]));\n\nconsole.log('orbitalPeriodDays([{ name: \"moon\", avgAlt: 378632.553 }]);');\nconsole.log('// Returns:');\nconsole.log(orbitalPeriodDays([{ name: \"moon\", avgAlt: 378632.553 }]));\n"]}