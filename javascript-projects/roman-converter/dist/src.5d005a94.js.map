{"version":3,"sources":["utils/convertToRoman.js","index.js"],"names":["M","symbol","next","value","D","C","L","X","V","I","ROMAN_SYMBOLS","_convertToRomanInOrderOfMag","orderOfMag","minSymbol","currentSymbol","romanStr","diff","repeats","repeat","_getRomanNumerals","num","convertToRoman","printConvertToRoman","decimal","console","log","window"],"mappings":";AA8FC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAzFD,IAAMA,EAAI,CAAEC,OAAQ,IAAKC,KAAM,KAAMC,MAAO,KACtCC,EAAI,CAAEH,OAAQ,IAAKC,KAAMF,EAAGG,MAAO,KACnCE,EAAI,CAAEJ,OAAQ,IAAKC,KAAME,EAAGD,MAAO,KACnCG,EAAI,CAAEL,OAAQ,IAAKC,KAAMG,EAAGF,MAAO,IACnCI,EAAI,CAAEN,OAAQ,IAAKC,KAAMI,EAAGH,MAAO,IACnCK,EAAI,CAAEP,OAAQ,IAAKC,KAAMK,EAAGJ,MAAO,GACnCM,EAAI,CAAER,OAAQ,IAAKC,KAAMM,EAAGL,MAAO,GACnCO,EAAgB,CACjBD,EAAAA,EACCF,GAAAA,EACCF,IAAAA,EACCL,KAAAA,GAYR,SAASW,EAA4BC,EAAYT,GAEzCU,IAAAA,EAAYH,EAAcE,GAE5BE,EAAgBD,EAChBE,EAAW,GACXC,EAAOb,EAYPa,GAVAb,GAA2B,EAAlBU,EAAUV,QAMrBY,GADAD,EAAgBD,EAAUX,MACDD,OACzBe,EAAOb,EAAQW,EAAcX,OAG3Ba,GAA0B,EAAlBH,EAAUV,MAAW,CAKzBc,IAAAA,EAAUD,EAAOH,EAAUV,MAC1BY,OAAAA,EAAWF,EAAUZ,OAAOiB,OAAOD,GAGrCJ,OAAAA,EAAUZ,OAASa,EAAcZ,KAAKD,OAY/C,SAASkB,EAAkBP,EAAYQ,GACjCA,OAAAA,EAAMR,GAAc,EAIfD,EAA4BC,EADjBQ,EAAOA,EAAMR,GAI1B,GAQM,SAASS,EAAeD,GAIhC,IAHDL,IAAAA,EAAW,GACXZ,EAAQiB,EAEHR,EAAa,IAAMA,GAAc,EAAGA,GAAc,GACzDG,GAAYI,EAAkBP,EAAYT,GAE1CA,GAASS,EAGJG,OAAAA;;ACrFT,aAEA,IAAA,EAAA,EAAA,QAAA,2BAmBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAbA,SAASO,EAAoBC,GAC3BC,QAAQC,IAAI,kBAAkBF,OAAAA,EAAiB,UAAA,EAAeA,EAAAA,SAAAA,IALhEG,OAAOL,eAAiBA,EAAxB,QAQAC,EAAoB,GACpBA,EAAoB,GACpBA,EAAoB,GACpBA,EAAoB,IACpBA,EAAoB,IACpBA,EAAoB,KACpBA,EAAoB,KACpBA,EAAoB,MACpBA,EAAoB,MACpBA,EAAoB","file":"src.5d005a94.js","sourceRoot":"../src","sourcesContent":["\n/*\n * Define a data structure to contain the Roman symbols\n */\n\nconst M = { symbol: \"M\", next: null, value: 1000 };\nconst D = { symbol: \"D\", next: M, value: 500 };\nconst C = { symbol: \"C\", next: D, value: 100 };\nconst L = { symbol: \"L\", next: C, value: 50 };\nconst X = { symbol: \"X\", next: L, value: 10 };\nconst V = { symbol: \"V\", next: X, value: 5 };\nconst I = { symbol: \"I\", next: V, value: 1 };\nconst ROMAN_SYMBOLS = {\n  1: I,\n  10: X,\n  100: C,\n  1000: M };\n\n/*\n * Get a Roman Numeral for a value in a specific order of magnitude.\n * @param {number} orderOfMag One of the following:\n *   1000: get Roman Numeral in [1000 - 3000]\n *   100: get Roman Numeral in [100 - 900]\n *   10: get Roman Numeral in [10 - 90]\n *   1: get Roman Numeral in [1 - 9]\n * @param {number} value The value for which to get the Numeral.\n * @return {string} The Roman Numeral string.\n */\nfunction _convertToRomanInOrderOfMag(orderOfMag, value) {\n  // minSymbol is one of I(1) / X(10) / C(100) / M(1000)\n  const minSymbol = ROMAN_SYMBOLS[orderOfMag];\n\n  let currentSymbol = minSymbol;\n  let romanStr = \"\";\n  let diff = value;\n\n  if (value >= minSymbol.value * 5) {\n    /*\n     * The value is over the halfway point in the range\n     * i.e. >= 5, 50, or 500\n     */\n    currentSymbol = minSymbol.next;\n    romanStr = currentSymbol.symbol;\n    diff = value - currentSymbol.value;\n  }\n\n  if (diff <= minSymbol.value * 3) {\n    /*\n     * The value is within 3 steps, so we append the required\n     * number of up to three I(1) / X(10) / C(100) / M(1000) symbols\n     */\n    const repeats = diff / minSymbol.value;\n    return romanStr + minSymbol.symbol.repeat(repeats);\n  }\n\n  return minSymbol.symbol + currentSymbol.next.symbol;\n}\n\n/* Get a Roman Numeral for a given order of magnitude of the input number.\n * @param {number} orderOfMag One of the following:\n *   1000: get Roman Numeral in [1000 - 3000]\n *   100: get Roman Numeral in [100 - 900]\n *   10: get Roman Numeral in [10 - 90]\n *   1: get Roman Numeral in [1 - 9]\n * @param {number} num The value to process.\n * @return {string} Roman Numeral for a part of the number.\n */\nfunction _getRomanNumerals(orderOfMag, num) {\n  if (num / orderOfMag >= 1) {\n    // the order of magnitude exists in this number\n    // extract the order of magnitude component\n    const component = num - (num % orderOfMag);\n    return _convertToRomanInOrderOfMag(orderOfMag, component);\n  }\n\n  return \"\";\n}\n\n/*\n * Converts the given decimal number into a Roman Numeral.\n * @param {number} num A positive integer in the range [1 - 3999]\n * @return {string} A string representing the Roman Numeral.\n */\nexport default function convertToRoman(num) {\n  let romanStr = \"\";\n  let value = num;\n  // split 'num' into its \"order of magnitude\" components\n  for (let orderOfMag = 1000; orderOfMag >= 1; orderOfMag /= 10) {\n    romanStr += _getRomanNumerals(orderOfMag, value);\n    // the value is set to the remainder\n    value %= orderOfMag;\n  }\n\n  return romanStr;\n}\n","/*\n * freeCodeCamp JavaScript Algorithms and Data Structures Certification\n * Project 2: Roman Numeral Converter\n * Alex Kozlov, 2019\n *\n * Converts the given decimal number into a Roman Numeral.\n */\n\n\"use strict\";\n\nimport convertToRoman from './utils/convertToRoman';\n\nwindow.convertToRoman = convertToRoman;\n\n/***  Usage Examples  ***/\n\nfunction printConvertToRoman(decimal) {\n  console.log(`convertToRoman(${decimal}) => ` + convertToRoman(decimal));\n}\n\nprintConvertToRoman(1);\nprintConvertToRoman(2);\nprintConvertToRoman(3);\nprintConvertToRoman(29);\nprintConvertToRoman(97);\nprintConvertToRoman(649);\nprintConvertToRoman(891);\nprintConvertToRoman(1023);\nprintConvertToRoman(2014);\nprintConvertToRoman(3999);\n"]}