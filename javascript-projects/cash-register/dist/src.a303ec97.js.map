{"version":3,"sources":["utils/checkCashRegister.js","index.js"],"names":["CURRENCY_VALUES","roundFloat","num","Math","round","getTotalCIDValue","cid","reduce","totalValue","currencyArray","checkCashRegister","price","cash","cidTotalValue","requiredChange","changeArray","remainingChange","reduceRight","currencyAvailable","currencyValue","currencyRequired","push","printCheckCashRegister","console","log","window"],"mappings":";AA0FC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EArFD,IAAMA,EAAkB,CACb,MAAA,IACC,OAAA,IACF,KAAA,GACG,QAAA,IACJ,IAAA,EACC,KAAA,EACD,IAAA,GACG,OAAA,GACK,cAAA,KAMjB,SAASC,EAAWC,GACXC,OAAAA,KAAKC,MAAY,IAANF,GAAa,IASjC,SAASG,EAAiBC,GAGjBL,OAAAA,EAFeK,EAAIC,OAAO,SAACC,EAAYC,GAC5CD,OAAAA,EAAaC,EAAc,IAAI,IAYpB,SAASC,EAAkBC,EAAOC,EAAMN,GAC/CO,IAAAA,EAAgBR,EAAiBC,GACjCQ,EAAiBb,EAAWW,EAAOD,GAErCE,GAAAA,GAAiBC,EACZ,MAAA,CAAW,OAAA,SAAoBR,OAAAA,GAGlCS,IAAAA,EAAc,GAiCjBC,OAAmB,GAhCEV,EAAIW,YAAY,SAACD,EAAiBP,GAElDS,IAAAA,EAAoBT,EAAc,GACpCS,GAAqB,GAArBA,EAEKF,OAAAA,EAGHG,IAAAA,EAAgBnB,EAAgBS,EAAc,IAChDO,GAAAA,EAAkBG,GAAiB,EAAG,CAGlCC,IAAAA,GAAoC,IAAhBJ,EACN,IAAhBA,GAAsC,IAAdG,IAAuB,IAE/CD,OAAAA,GAAqBE,GAEvBL,EAAYM,KAAK,CAACZ,EAAc,GAAIW,IAC7BnB,EAAWe,EAAkBI,KAItCL,EAAYM,KAAK,CAACZ,EAAc,GAAIS,IAC7BjB,EAAWe,EAAkBE,IAK/BF,OAAAA,GAENF,GAGM,CAAW,OAAA,OAAkBC,OAAAA,GAG/B,CAAW,OAAA,qBAAgC,OAAA;;ACjDpD,aAEA,IAAA,EAAA,EAAA,QAAA,8BA0DA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GApDA,SAASO,IAAgC,IAAA,EACvCC,QAAQC,IAAI,uBACZD,EAAAA,SAAQC,IAAR,MAAA,EAAA,WACAD,QAAQC,IAAI,MACZD,QAAQC,IAAI,eACZD,QAAQC,IAAId,EAAZ,QAAA,WAAA,EAAA,YATFe,OAAOf,kBAAoBA,EAA3B,QAYAY,EAAuB,KAAM,GAC3B,CAAC,CAAC,QAAS,MACT,CAAC,SAAU,MACX,CAAC,OAAQ,KACT,CAAC,UAAW,MACZ,CAAC,MAAO,IACR,CAAC,OAAQ,IACT,CAAC,MAAO,IACR,CAAC,SAAU,IACX,CAAC,cAAe,OAEpBA,EAAuB,KAAM,IAC3B,CAAC,CAAC,QAAS,MACT,CAAC,SAAU,MACX,CAAC,OAAQ,KACT,CAAC,UAAW,MACZ,CAAC,MAAO,IACR,CAAC,OAAQ,IACT,CAAC,MAAO,IACR,CAAC,SAAU,IACX,CAAC,cAAe,OAEpBA,EAAuB,KAAM,GAC3B,CAAC,CAAC,QAAS,KACT,CAAC,SAAU,GACX,CAAC,OAAQ,GACT,CAAC,UAAW,GACZ,CAAC,MAAO,GACR,CAAC,OAAQ,GACT,CAAC,MAAO,GACR,CAAC,SAAU,GACX,CAAC,cAAe,KAEpBA,EAAuB,KAAM,GAC3B,CAAC,CAAC,QAAS,KACT,CAAC,SAAU,GACX,CAAC,OAAQ,GACT,CAAC,UAAW,GACZ,CAAC,MAAO,GACR,CAAC,OAAQ,GACT,CAAC,MAAO,GACR,CAAC,SAAU,GACX,CAAC,cAAe,KAEpBA,EAAuB,KAAM,GAC3B,CAAC,CAAC,QAAS,IACT,CAAC,SAAU,GACX,CAAC,OAAQ,GACT,CAAC,UAAW,GACZ,CAAC,MAAO,GACR,CAAC,OAAQ,GACT,CAAC,MAAO,GACR,CAAC,SAAU,GACX,CAAC,cAAe","file":"src.a303ec97.js","sourceRoot":"../src","sourcesContent":["\n/*\n * Define a data structure for the currency values.\n */\n\nconst CURRENCY_VALUES = {\n  \"PENNY\": 0.01,\n  \"NICKEL\":\t0.05,\n  \"DIME\": 0.1,\n  \"QUARTER\": 0.25,\n  \"ONE\": 1,\n  \"FIVE\": 5,\n  \"TEN\": 10,\n  \"TWENTY\": 20,\n  \"ONE HUNDRED\": 100 };\n\n/*\n * Round a floating point number to two decimal places.\n */\n\nfunction roundFloat(num) {\n  return Math.round(num * 100) / 100;\n}\n\n/*\n * Calculate the total \"cash-in-drawer\" value.\n * @param {Array<array>} cid The \"cash-in-drawer\" array.\n * @return {number} The total \"cash-in-drawer\" value.\n */\n\nfunction getTotalCIDValue(cid) {\n  const cidTotalValue = cid.reduce((totalValue, currencyArray) =>\n    totalValue + currencyArray[1], 0);\n  return roundFloat(cidTotalValue);\n}\n\n/*\n * Calculate the required change for a purchase.\n * @param {number} price The purchase price.\n * @param {number} cash The cash payment amount.\n * @param {Array<array>} cid The \"cash-in-drawer\" array.\n * @return {Object} Object containing \"status\" string and \"change\" array.\n */\n\nexport default function checkCashRegister(price, cash, cid) {\n  const cidTotalValue = getTotalCIDValue(cid);\n  const requiredChange = roundFloat(cash - price);\n\n  if (cidTotalValue == requiredChange) {\n    return {\"status\": \"CLOSED\", \"change\": cid};\n  }\n\n  const changeArray = [];\n  const remainingChange = cid.reduceRight((remainingChange, currencyArray) => {\n\n    const currencyAvailable = currencyArray[1];\n    if (currencyAvailable == 0) {\n      // we have no available currency\n      return remainingChange;\n    }\n\n    const currencyValue = CURRENCY_VALUES[currencyArray[0]];\n    if (remainingChange / currencyValue >= 1) {\n\n      // we could possibly provide change in this currency\n      const currencyRequired = (remainingChange*100 -\n        ((remainingChange*100) % (currencyValue*100))) / 100;\n\n      if (currencyAvailable >= currencyRequired) {\n        // we have enough currency to cover what is required\n        changeArray.push([currencyArray[0], currencyRequired]);\n        return roundFloat(remainingChange - currencyRequired);\n      }\n\n      // if we don't have enough, provide what we have available\n      changeArray.push([currencyArray[0], currencyAvailable]);\n      return roundFloat(remainingChange - currencyAvailable);\n    }\n\n    // this means the remaining change is less than the currency value,\n    // so we can't provide any currency\n    return remainingChange;\n\n  }, requiredChange);\n\n  if(remainingChange == 0) {\n    return {\"status\": \"OPEN\", \"change\": changeArray};\n  }\n\n  return {\"status\": \"INSUFFICIENT_FUNDS\", \"change\": []};\n}\n","/*\n * freeCodeCamp JavaScript Algorithms and Data Structures Certification\n * Project 5: Cash Register\n * Alex Kozlov, 2019\n *\n * Implements a cash register drawer function checkCashRegister() that\n * accepts a purchase price, cash payment amount, and \"cash-in-drawer\".\n * Returns an object in the following format containing a \"status\" string\n * and a \"change\" array:\n *\n *   {status: \"INSUFFICIENT_FUNDS\", change: []}\n *\n * if the funds in \"cash-in-drawer\" are insufficent, or don't have the\n * correct currencies for the exact change. The \"change\" array is empty.\n *\n *   {status: \"CLOSED\", change: [...]}\n *\n * if the funds in \"cash-in-drawer\" are equal to the required change.\n * The \"change\" array is equal to the \"cash-in-drawer\" array, sorted in\n * lowest to highest currency value.\n *\n *   {status: \"OPEN\", change: [...]}\n *\n * if the funds in \"cash-in-drawer\" are greater than the required change.\n * The \"change\" array denotes the currencies for the required change in a\n * similar format to the \"cash-in-drawer\" array, except sorted in highest\n * to lowest currency value.\n */\n\n// Example \"cash-in-drawer\" array:\n// [[\"PENNY\", 1.01],\n// [\"NICKEL\", 2.05],\n// [\"DIME\", 3.1],\n// [\"QUARTER\", 4.25],\n// [\"ONE\", 90],\n// [\"FIVE\", 55],\n// [\"TEN\", 20],\n// [\"TWENTY\", 60],\n// [\"ONE HUNDRED\", 100]]\n\n\"use strict\";\n\nimport checkCashRegister from './utils/checkCashRegister';\n\nwindow.checkCashRegister = checkCashRegister;\n\n/***  Usage Examples  ***/\n\nfunction printCheckCashRegister(...args) {\n  console.log('checkCashRegister(');\n  console.log(...args);\n  console.log(');');\n  console.log('// Returns:');\n  console.log(checkCashRegister(...args));\n}\n\nprintCheckCashRegister(19.5, 20,\n  [[\"PENNY\", 1.01],\n    [\"NICKEL\", 2.05],\n    [\"DIME\", 3.1],\n    [\"QUARTER\", 4.25],\n    [\"ONE\", 90],\n    [\"FIVE\", 55],\n    [\"TEN\", 20],\n    [\"TWENTY\", 60],\n    [\"ONE HUNDRED\", 100]]);\n\nprintCheckCashRegister(3.26, 100,\n  [[\"PENNY\", 1.01],\n    [\"NICKEL\", 2.05],\n    [\"DIME\", 3.1],\n    [\"QUARTER\", 4.25],\n    [\"ONE\", 90],\n    [\"FIVE\", 55],\n    [\"TEN\", 20],\n    [\"TWENTY\", 60],\n    [\"ONE HUNDRED\", 100]]);\n\nprintCheckCashRegister(19.5, 20,\n  [[\"PENNY\", 0.01],\n    [\"NICKEL\", 0],\n    [\"DIME\", 0],\n    [\"QUARTER\", 0],\n    [\"ONE\", 0],\n    [\"FIVE\", 0],\n    [\"TEN\", 0],\n    [\"TWENTY\", 0],\n    [\"ONE HUNDRED\", 0]]);\n\nprintCheckCashRegister(19.5, 20,\n  [[\"PENNY\", 0.01],\n    [\"NICKEL\", 0],\n    [\"DIME\", 0],\n    [\"QUARTER\", 0],\n    [\"ONE\", 1],\n    [\"FIVE\", 0],\n    [\"TEN\", 0],\n    [\"TWENTY\", 0],\n    [\"ONE HUNDRED\", 0]]);\n\nprintCheckCashRegister(19.5, 20,\n  [[\"PENNY\", 0.5],\n    [\"NICKEL\", 0],\n    [\"DIME\", 0],\n    [\"QUARTER\", 0],\n    [\"ONE\", 0],\n    [\"FIVE\", 0],\n    [\"TEN\", 0],\n    [\"TWENTY\", 0],\n    [\"ONE HUNDRED\", 0]]);\n"]}